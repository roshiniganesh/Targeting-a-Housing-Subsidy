labs(x = "Credit", y = "Density of probabilities",
title = "Figure 6: Dist. of predicted probabilities by observed outcome - Kitchen Sink Model") +
theme(strip.text.x = element_text(size = 18),
legend.position = "none")
# Creating probabilities plot for Engineered Model
b <- ggplot(housing_eng_Test_Prob, aes(x = probs, fill = as.factor(outcome))) +
geom_density() +
facet_grid(outcome ~ .) +
scale_fill_manual(values = paletteh) +
labs(x = "Credit", y = "Density of probabilities",
title = "Figure 7: Dist. of predicted probabilities by observed outcome - Engineered Model", size=1) +
theme(strip.text.x = element_text(size = 18),
legend.position = "none")
ggarrange(a, b, nrow = 2)
# Predicted Probabilities - Base Model
kitchenSink_Test_Prob <-
kitchenSink_Test_Prob %>%
na.omit()
# Predicted Probabilities - Engineered Model
housing_eng_Test_Prob <-
housing_eng_Test_Prob %>%
na.omit()
# Creating probabilities plot for Base Model
a <- ggplot(kitchenSink_Test_Prob, aes(x = probs, fill = as.factor(outcome))) +
geom_density() +
facet_grid(outcome ~ .) +
scale_fill_manual(values = paletteh) +
labs(x = "Credit", y = "Density of probabilities",
title = "Figure 6: Dist. of predicted probabilities by observed outcome - Kitchen Sink Model") +
theme(strip.text.x = element_text(size = 18),
legend.position = "none")
# Creating probabilities plot for Engineered Model
b <- ggplot(housing_eng_Test_Prob, aes(x = probs, fill = as.factor(outcome))) +
geom_density() +
facet_grid(outcome ~ .) +
scale_fill_manual(values = paletteh) +
labs(x = "Credit", y = "Density of probabilities",
title = "Figure 7: Dist. of predicted probabilities by observed outcome - Engineered Model") +
theme(strip.text.x = element_text(size = 12),
legend.position = "none")
ggarrange(a, b, nrow = 2)
# Predicted Probabilities - Base Model
kitchenSink_Test_Prob <-
kitchenSink_Test_Prob %>%
na.omit()
# Predicted Probabilities - Engineered Model
housing_eng_Test_Prob <-
housing_eng_Test_Prob %>%
na.omit()
# Creating probabilities plot for Base Model
a <- ggplot(kitchenSink_Test_Prob, aes(x = probs, fill = as.factor(outcome))) +
geom_density() +
facet_grid(outcome ~ .) +
scale_fill_manual(values = paletteh) +
labs(x = "Credit", y = "Density of probabilities",
title = "Figure 6: Dist. of predicted probabilities by observed outcome - Kitchen Sink Model") +
theme(strip.text.x = element_text(size = 18),
legend.position = "none")
# Creating probabilities plot for Engineered Model
b <- ggplot(housing_eng_Test_Prob, aes(x = probs, fill = as.factor(outcome))) +
geom_density() +
facet_grid(outcome ~ .) +
scale_fill_manual(values = paletteh) +
labs(x = "Credit", y = "Density of probabilities",
title = "Figure 7: Dist. of predicted probabilities by observed outcome - Engineered Model") +
theme(strip.text.x = element_text(size = 18),
legend.position = "none")
ggarrange(a, b, nrow = 2)
# Predicted Probabilities - Base Model
kitchenSink_Test_Prob <-
kitchenSink_Test_Prob %>%
na.omit()
# Predicted Probabilities - Engineered Model
housing_eng_Test_Prob <-
housing_eng_Test_Prob %>%
na.omit()
# Creating probabilities plot for Base Model
a <- ggplot(kitchenSink_Test_Prob, aes(x = probs, fill = as.factor(outcome))) +
geom_density() +
facet_grid(outcome ~ .) +
scale_fill_manual(values = paletteh) +
labs(x = "Credit", y = "Density of probabilities",
title = "Figure 6: Dist. of predicted probabilities by observed outcome - Kitchen Sink Model") +
theme(strip.text.x = element_text(size = 18),
legend.position = "none")
# Creating probabilities plot for Engineered Model
b <- ggplot(housing_eng_Test_Prob, aes(x = probs, fill = as.factor(outcome))) +
geom_density() +
facet_grid(outcome ~ .) +
scale_fill_manual(values = paletteh) +
labs(x = "Credit", y = "Density of probabilities",
title = "Figure 7: Dist. of predicted probabilities by observed outcome - Engineered Model") +
theme(strip.text.x = element_text(size = 18), plot_title = element_text(size = 18),
legend.position = "none")
ggarrange(a, b, nrow = 2)
# Predicted Probabilities - Base Model
kitchenSink_Test_Prob <-
kitchenSink_Test_Prob %>%
na.omit()
# Predicted Probabilities - Engineered Model
housing_eng_Test_Prob <-
housing_eng_Test_Prob %>%
na.omit()
# Creating probabilities plot for Base Model
a <- ggplot(kitchenSink_Test_Prob, aes(x = probs, fill = as.factor(outcome))) +
geom_density() +
facet_grid(outcome ~ .) +
scale_fill_manual(values = paletteh) +
labs(x = "Credit", y = "Density of probabilities",
title = "Figure 6: Dist. of predicted probabilities by observed outcome - Kitchen Sink Model") +
theme(strip.text.x = element_text(size = 18),
legend.position = "none")
# Creating probabilities plot for Engineered Model
b <- ggplot(housing_eng_Test_Prob, aes(x = probs, fill = as.factor(outcome))) +
geom_density() +
facet_grid(outcome ~ .) +
scale_fill_manual(values = paletteh) +
labs(x = "Credit", y = "Density of probabilities",
title = "Figure 7: Dist. of predicted probabilities by observed outcome - Engineered Model") +
theme(strip.text.x = element_text(size = 18), plot.title = element_text(size = 10),
legend.position = "none")
ggarrange(a, b, nrow = 2)
# Predicted Probabilities - Base Model
kitchenSink_Test_Prob <-
kitchenSink_Test_Prob %>%
na.omit()
# Predicted Probabilities - Engineered Model
housing_eng_Test_Prob <-
housing_eng_Test_Prob %>%
na.omit()
# Creating probabilities plot for Base Model
a <- ggplot(kitchenSink_Test_Prob, aes(x = probs, fill = as.factor(outcome))) +
geom_density() +
facet_grid(outcome ~ .) +
scale_fill_manual(values = paletteh) +
labs(x = "Credit", y = "Density of probabilities",
title = "Figure 6: Dist. of predicted probabilities by observed outcome - Kitchen Sink Model") +
theme(strip.text.x = element_text(size = 10), plot.title = element_text(size = 12),
legend.position = "none")
# Creating probabilities plot for Engineered Model
b <- ggplot(housing_eng_Test_Prob, aes(x = probs, fill = as.factor(outcome))) +
geom_density() +
facet_grid(outcome ~ .) +
scale_fill_manual(values = paletteh) +
labs(x = "Credit", y = "Density of probabilities",
title = "Figure 7: Dist. of predicted probabilities by observed outcome - Engineered Model") +
theme(strip.text.x = element_text(size = 10), plot.title = element_text(size = 12),
legend.position = "none")
ggarrange(a, b, nrow = 2)
# Predicted Probabilities - Base Model
kitchenSink_Test_Prob <-
kitchenSink_Test_Prob %>%
na.omit()
# Predicted Probabilities - Engineered Model
housing_eng_Test_Prob <-
housing_eng_Test_Prob %>%
na.omit()
# Creating probabilities plot for Base Model
a <- ggplot(kitchenSink_Test_Prob, aes(x = probs, fill = as.factor(outcome))) +
geom_density() +
facet_grid(outcome ~ .) +
scale_fill_manual(values = paletteh) +
labs(x = "Credit", y = "Density of probabilities",
title = "Figure 6: Dist. of predicted probabilities by observed outcome - Kitchen Sink Model") +
theme(strip.text.x = element_text(size = 7), plot.title = element_text(size = 10),
legend.position = "none")
# Creating probabilities plot for Engineered Model
b <- ggplot(housing_eng_Test_Prob, aes(x = probs, fill = as.factor(outcome))) +
geom_density() +
facet_grid(outcome ~ .) +
scale_fill_manual(values = paletteh) +
labs(x = "Credit", y = "Density of probabilities",
title = "Figure 7: Dist. of predicted probabilities by observed outcome - Engineered Model") +
theme(strip.text.x = element_text(size = 7), plot.title = element_text(size = 10),
legend.position = "none")
ggarrange(a, b, nrow = 2)
# Predicted Probabilities - Base Model
kitchenSink_Test_Prob <-
kitchenSink_Test_Prob %>%
na.omit()
# Predicted Probabilities - Engineered Model
housing_eng_Test_Prob <-
housing_eng_Test_Prob %>%
na.omit()
# Creating probabilities plot for Base Model
a <- ggplot(kitchenSink_Test_Prob, aes(x = probs, fill = as.factor(outcome))) +
geom_density() +
facet_grid(outcome ~ .) +
scale_fill_manual(values = paletteh) +
labs(x = "Credit", y = "Density of probabilities",
title = "Figure 6: Dist. of predicted probabilities by observed outcome - Kitchen Sink Model") +
theme(strip.text.x = element_text(size = 7), plot.title = element_text(size = 12),
legend.position = "none")
# Creating probabilities plot for Engineered Model
b <- ggplot(housing_eng_Test_Prob, aes(x = probs, fill = as.factor(outcome))) +
geom_density() +
facet_grid(outcome ~ .) +
scale_fill_manual(values = paletteh) +
labs(x = "Credit", y = "Density of probabilities",
title = "Figure 7: Dist. of predicted probabilities by observed outcome - Engineered Model") +
theme(strip.text.x = element_text(size = ), plot.title = element_text(size = 12),
legend.position = "none")
ggarrange(a, b, nrow = 2)
# CV Goodness of Fit - Base Model
grid.arrange(ncol = 1,
dplyr::select(cvFit_base$resample, -Resample) %>%
gather(metric, value) %>%
left_join(gather(cvFit_base$results[2:4], metric, mean)) %>%
ggplot(aes(value)) +
geom_histogram(bins=35, fill = "#FF006A") +
facet_wrap(~metric) +
geom_vline(aes(xintercept = mean), colour = "#981FAC", linetype = 3, size = 1.5) +
scale_x_continuous(limits = c(0, 1)) +
labs(x="Goodness of Fit", y="Count", title="Figure 8: CV Goodness of Fit Metrics \n Kitchen Sink Model",
subtitle = "Across-fold mean represented as dotted lines") +
theme(plot.title = element_text(size = 10)),
# CV Goodness of Fit - Engineered Model
dplyr::select(cvFit_eng$resample, -Resample) %>%
gather(metric, value) %>%
left_join(gather(cvFit_eng$results[2:4], metric, mean)) %>%
ggplot(aes(value)) +
geom_histogram(bins=35, fill = "#FF006A") +
facet_wrap(~metric) +
geom_vline(aes(xintercept = mean), colour = "#981FAC", linetype = 3, size = 1.5) +
scale_x_continuous(limits = c(0, 1)) +
labs(x="Goodness of Fit", y="Count", title="Figure 9 CV Goodness of Fit Metrics \n Feature Engineered Model",
subtitle = "Across-fold mean represented as dotted lines") +
theme(plot.title = element_text(size = 10)))
# CV Goodness of Fit - Base Model
grid.arrange(ncol = 1,
dplyr::select(cvFit_base$resample, -Resample) %>%
gather(metric, value) %>%
left_join(gather(cvFit_base$results[2:4], metric, mean)) %>%
ggplot(aes(value)) +
geom_histogram(bins=35, fill = "#FF006A") +
facet_wrap(~metric) +
geom_vline(aes(xintercept = mean), colour = "#981FAC", linetype = 3, size = 1.5) +
scale_x_continuous(limits = c(0, 1)) +
labs(x="Goodness of Fit", y="Count", title="Figure 8: CV Goodness of Fit Metrics \n Kitchen Sink Model",
subtitle = "Across-fold mean represented as dotted lines") +
theme(plot.title = element_text(size = 10), plot.subtitle = element_text(size = 7)),
# CV Goodness of Fit - Engineered Model
dplyr::select(cvFit_eng$resample, -Resample) %>%
gather(metric, value) %>%
left_join(gather(cvFit_eng$results[2:4], metric, mean)) %>%
ggplot(aes(value)) +
geom_histogram(bins=35, fill = "#FF006A") +
facet_wrap(~metric) +
geom_vline(aes(xintercept = mean), colour = "#981FAC", linetype = 3, size = 1.5) +
scale_x_continuous(limits = c(0, 1)) +
labs(x="Goodness of Fit", y="Count", title="Figure 9 CV Goodness of Fit Metrics \n Feature Engineered Model",
subtitle = "Across-fold mean represented as dotted lines") +
theme(plot.title = element_text(size = 10), plot.subtitle = element_text(size = 7)))
# ROC Curve Plot - Base Model
a <- ggplot(kitchenSink_Test_Prob, aes(d = as.numeric(kitchenSink_Test_Prob$outcome), m = probs)) +
geom_roc(n.cuts = 50, labels = FALSE, colour = "#FF006A", size = .7) +
style_roc(theme = theme_grey) +
geom_abline(slope = 1, intercept = 0, size = .5, color = "#981FAC") +
labs(title = "Figure 10: ROC Curve - Base Model", subtitle = "AUC = 0.7884")+
theme(plot.title = element_text(size = 10), plot.subtitle = element_text(size = 7)))
# ROC Curve Plot - Base Model
a <- ggplot(kitchenSink_Test_Prob, aes(d = as.numeric(kitchenSink_Test_Prob$outcome), m = probs)) +
geom_roc(n.cuts = 50, labels = FALSE, colour = "#FF006A", size = .7) +
style_roc(theme = theme_grey) +
geom_abline(slope = 1, intercept = 0, size = .5, color = "#981FAC") +
labs(title = "Figure 10: ROC Curve - Base Model", subtitle = "AUC = 0.7884")+
theme(plot.title = element_text(size = 10), plot.subtitle = element_text(size = 7)))
# ROC Curve Plot - Base Model
a <- ggplot(kitchenSink_Test_Prob, aes(d = as.numeric(kitchenSink_Test_Prob$outcome), m = probs)) +
geom_roc(n.cuts = 50, labels = FALSE, colour = "#FF006A", size = .7) +
style_roc(theme = theme_grey) +
geom_abline(slope = 1, intercept = 0, size = .5, color = "#981FAC") +
labs(title = "Figure 10: ROC Curve - Base Model", subtitle = "AUC = 0.7884")+
theme(plot.title = element_text(size = 10), plot.subtitle = element_text(size = 7))
# ROC Curve Plot - Engineered Model
b <- ggplot(housing_eng_Test_Prob, aes(d = as.numeric(housing_eng_Test_Prob$outcome), m = probs)) +
geom_roc(n.cuts = 50, labels = FALSE, colour = "#FF006A", size = .7) +
style_roc(theme = theme_grey) +
geom_abline(slope = 1, intercept = 0, size = .5, color = "#981FAC") +
labs(title = "Figure 11: ROC Curve - Engineered Model", subtitle = "AUC = 0.8202")+
theme(plot.title = element_text(size = 10), plot.subtitle = element_text(size = 7))
ggarrange(a, b, nrow = 1)
# Confusion Matrix - Base Model Threshold
baseThreshold <- iterateThresholds_base(kitchenSink_Test_Prob)
baseThreshold_revenue <-
baseThreshold %>%
group_by(Threshold) %>%
summarize(Revenue = sum(Revenue))
a <- baseThreshold %>%
ggplot(.,aes(Threshold, Revenue, colour = Variable)) +
geom_point() +
scale_colour_manual(values = palettef[c(5, 1:3)]) +
labs(title = "Figure 12: Revenue by confusion matrix type and threshold",
y = "Revenue") + theme(plot.title = element_text(size = 10)) +
plotTheme() +
guides(colour=guide_legend(title = "Confusion Matrix"))
# Confusion Matrix - Engineered Model Threshold
engineeredThreshold <- iterateThresholds_eng(housing_eng_Test_Prob)
engineeredThreshold_revenue <-
engineeredThreshold %>%
group_by(Threshold) %>%
summarize(Revenue = sum(Revenue))
b <- engineeredThreshold %>%
ggplot(.,aes(Threshold, Revenue, colour = Variable)) +
geom_point() +
scale_colour_manual(values = palettef[c(5, 1:3)]) +
labs(title = "Figure 13: Revenue by confusion matrix type and threshold",
y = "Revenue") + theme(plot.title = element_text(size = 10)) +
plotTheme() +
guides(colour=guide_legend(title = "Confusion Matrix"))
ggarrange(a,b, nrow=2)
# Confusion Matrix - Base Model Threshold
baseThreshold <- iterateThresholds_base(kitchenSink_Test_Prob)
baseThreshold_revenue <-
baseThreshold %>%
group_by(Threshold) %>%
summarize(Revenue = sum(Revenue))
a <- baseThreshold %>%
ggplot(.,aes(Threshold, Revenue, colour = Variable)) +
geom_point() +
scale_colour_manual(values = palettef[c(5, 1:3)]) +
labs(title = "Figure 12: Revenue by confusion matrix type and threshold",
y = "Revenue") + theme(plot.title = element_text(size = 10)) +
plotTheme() +
guides(colour=guide_legend(title = "Confusion Matrix"))
# Confusion Matrix - Engineered Model Threshold
engineeredThreshold <- iterateThresholds_eng(housing_eng_Test_Prob)
engineeredThreshold_revenue <-
engineeredThreshold %>%
group_by(Threshold) %>%
summarize(Revenue = sum(Revenue))
b <- engineeredThreshold %>%
ggplot(.,aes(Threshold, Revenue, colour = Variable)) +
geom_point() +
scale_colour_manual(values = palettef[c(5, 1:3)]) +
labs(title = "Figure 13: Revenue by confusion matrix type and threshold",
y = "Revenue") + theme(plot.title = element_text(size = 10)) +
plotTheme() +
guides(colour=guide_legend(title = "Confusion Matrix"))
ggarrange(a,b, nrow=2)
# Confusion Matrix - Base Model Threshold
baseThreshold <- iterateThresholds_base(kitchenSink_Test_Prob)
baseThreshold_revenue <-
baseThreshold %>%
group_by(Threshold) %>%
summarize(Revenue = sum(Revenue))
a <- baseThreshold %>%
ggplot(.,aes(Threshold, Revenue, colour = Variable)) +
geom_point() +
scale_colour_manual(values = palettef[c(5, 1:3)]) +
labs(title = "Figure 12: Revenue by confusion matrix type and threshold",
y = "Revenue") + theme(plot.title = element_text(size = 10)) +
plotTheme() +
guides(colour=guide_legend(title = "Confusion Matrix"))
# Confusion Matrix - Engineered Model Threshold
engineeredThreshold <- iterateThresholds_eng(housing_eng_Test_Prob)
engineeredThreshold_revenue <-
engineeredThreshold %>%
group_by(Threshold) %>%
summarize(Revenue = sum(Revenue))
b <- engineeredThreshold %>%
ggplot(.,aes(Threshold, Revenue, colour = Variable)) +
geom_point() +
scale_colour_manual(values = palettef[c(5, 1:3)]) +
labs(title = "Figure 13: Revenue by confusion matrix type and threshold",
y = "Revenue") + theme(plot.title = element_text(size = 10)) +
plotTheme() +
guides(colour=guide_legend(title = "Confusion Matrix"))
ggarrange(a,b, nrow=2)
# Confusion Matrix - Base Model Threshold
baseThreshold <- iterateThresholds_base(kitchenSink_Test_Prob)
baseThreshold_revenue <-
baseThreshold %>%
group_by(Threshold) %>%
summarize(Revenue = sum(Revenue))
a <- baseThreshold %>%
ggplot(.,aes(Threshold, Revenue, colour = Variable)) +
geom_point() +
scale_colour_manual(values = palettef[c(5, 1:3)]) +
labs(title = "Figure 12: Revenue by confusion matrix type and threshold", subtitle = "Base Model",
y = "Revenue") + theme(plot.title = element_text(size = 7), plot.subtitle = element_text(size = 5)) +
plotTheme() +
guides(colour=guide_legend(title = "Confusion Matrix"))
# Confusion Matrix - Engineered Model Threshold
engineeredThreshold <- iterateThresholds_eng(housing_eng_Test_Prob)
engineeredThreshold_revenue <-
engineeredThreshold %>%
group_by(Threshold) %>%
summarize(Revenue = sum(Revenue))
b <- engineeredThreshold %>%
ggplot(.,aes(Threshold, Revenue, colour = Variable)) +
geom_point() +
scale_colour_manual(values = palettef[c(5, 1:3)]) +
labs(title = "Figure 13: Revenue by confusion matrix type and threshold", subtitle = "Engineered Model",
y = "Revenue") + theme(plot.title = element_text(size = 7), plot.subtitle = element_text(size = 5)) +
plotTheme() +
guides(colour=guide_legend(title = "Confusion Matrix"))
ggarrange(a,b, nrow=2)
# Confusion Matrix - Base Model Threshold
baseThreshold <- iterateThresholds_base(kitchenSink_Test_Prob)
baseThreshold_revenue <-
baseThreshold %>%
group_by(Threshold) %>%
summarize(Revenue = sum(Revenue))
a <- baseThreshold %>%
ggplot(.,aes(Threshold, Revenue, colour = Variable)) +
geom_point() +
scale_colour_manual(values = palettef[c(5, 1:3)]) +
labs(title = "Figure 12: Revenue by confusion matrix type and threshold", subtitle = "Base Model",
y = "Revenue") + theme(plot.title = element_text(size = 7), plot.subtitle = element_text(size = 5)) +
plotTheme() +
guides(colour=guide_legend(title = "Confusion Matrix"))
# Confusion Matrix - Engineered Model Threshold
engineeredThreshold <- iterateThresholds_eng(housing_eng_Test_Prob)
engineeredThreshold_revenue <-
engineeredThreshold %>%
group_by(Threshold) %>%
summarize(Revenue = sum(Revenue))
b <- engineeredThreshold %>%
ggplot(.,aes(Threshold, Revenue, colour = Variable)) +
geom_point() +
scale_colour_manual(values = palettef[c(5, 1:3)]) +
labs(title = "Figure 13: Revenue by confusion matrix type and threshold", subtitle = "Engineered Model",
y = "Revenue") + theme(plot.title = element_text(size = 7), plot.subtitle = element_text(size = 10)) +
guides(colour=guide_legend(title = "Confusion Matrix"))
ggarrange(a,b, nrow=2)
# Confusion Matrix - Base Model Threshold
baseThreshold <- iterateThresholds_base(kitchenSink_Test_Prob)
baseThreshold_revenue <-
baseThreshold %>%
group_by(Threshold) %>%
summarize(Revenue = sum(Revenue))
a <- baseThreshold %>%
ggplot(.,aes(Threshold, Revenue, colour = Variable)) +
geom_point() +
scale_colour_manual(values = palettef[c(5, 1:3)]) +
labs(title = "Figure 12: Revenue by confusion matrix type and threshold", subtitle = "Base Model",
y = "Revenue") + theme(plot.title = element_text(size = 10), plot.subtitle = element_text(size = 7)) +
guides(colour=guide_legend(title = "Confusion Matrix"))
# Confusion Matrix - Engineered Model Threshold
engineeredThreshold <- iterateThresholds_eng(housing_eng_Test_Prob)
engineeredThreshold_revenue <-
engineeredThreshold %>%
group_by(Threshold) %>%
summarize(Revenue = sum(Revenue))
b <- engineeredThreshold %>%
ggplot(.,aes(Threshold, Revenue, colour = Variable)) +
geom_point() +
scale_colour_manual(values = palettef[c(5, 1:3)]) +
labs(title = "Figure 13: Revenue by confusion matrix type and threshold", subtitle = "Engineered Model",
y = "Revenue") + theme(plot.title = element_text(size = 10), plot.subtitle = element_text(size = 7)) +
guides(colour=guide_legend(title = "Confusion Matrix"))
ggarrange(a,b, nrow=2)
# Revenue and Credits by Threshold for Base Model
baseThreshold_revenue <-
baseThreshold %>%
mutate(TookCredit = ifelse(Variable == "True_Positive", (Count * .25),
ifelse(Variable == "False_Negative", Count, 0))) %>%
group_by(Threshold) %>%
summarize(Total_Revenue = sum(Revenue),
Total_Count_Of_Credits = sum(TookCredit))
# Revenue and Credits by Threshold for Engineered Model
engineeredThreshold_revenue <-
engineeredThreshold %>%
mutate(TookCredit = ifelse(Variable == "True_Positive", (Count * .25),
ifelse(Variable == "False_Negative", Count, 0))) %>%
group_by(Threshold) %>%
summarize(Total_Revenue = sum(Revenue),
Total_Count_Of_Credits = sum(TookCredit))
# Revenue Plot for Engineered Model
grid.arrange(ncol = 1,
ggplot(engineeredThreshold_revenue)+
geom_line(aes(x = Threshold, y = Total_Revenue),color = "#981FAC")+
geom_vline(xintercept =  pull(arrange(engineeredThreshold_revenue, -Total_Revenue)[1,1]),color = "#FF006A")+
labs(title = "Figure 14: Total Revenue By Threshold - Engineered Model",
subtitle = "Vertical Line Denotes Optimal Threshold")+
theme(plot.title = element_text(size = 10), plot.subtitle = element_text(size = 7)),
# Credits Plot for Engineered Model
ggplot(engineeredThreshold_revenue)+
geom_line(aes(x = Threshold, y = Total_Count_Of_Credits),color = "#981FAC")+
geom_vline(xintercept =  pull(arrange(engineeredThreshold_revenue, -Total_Count_Of_Credits)[1,1]),color = "#FF006A")+
labs(title = "Figure 15: Total Count of Credits By Threshold - Engineered Model",
subtitle = "Vertical Line Denotes Optimal Threshold") +
theme(plot.title = element_text(size = 10), plot.subtitle = element_text(size = 7)))
# Correlation Matrix - Numeric Variables
corr <- round(cor(housing %>% select(where(is.numeric))), 1)
p.mat <- cor_pmat(housing %>% select(where(is.numeric)))
ggcorrplot(corr, p.mat = p.mat, hc.order = TRUE,
type = "lower", insig = "blank",
ggtheme = ggplot2::theme_gray,
colors = c("#981FAC","#FE9900","#FF006A"), title = "Figure 1: Feature correlations", lab = TRUE)
# Correlation Matrix - Numeric Variables
corr <- round(cor(housing %>% select(where(is.numeric))), 1)
p.mat <- cor_pmat(housing %>% select(where(is.numeric)))
ggcorrplot(corr, p.mat = p.mat, hc.order = TRUE,
type = "lower", insig = "blank",
ggtheme = ggplot2::theme_gray,
colors = c("#981FAC","#FE9900","#FF006A"), title = "Figure 1: Feature correlations", lab = TRUE)
# Correlation Matrix - Numeric Variables
corr <- round(cor(housing %>% select(where(is.numeric))), 1)
p.mat <- cor_pmat(housing %>% select(where(is.numeric)))
ggcorrplot(corr, p.mat = p.mat, hc.order = TRUE,
type = "lower", insig = "blank",
ggtheme = ggplot2::theme_gray,
colors = c("#981FAC","#FE9900","#FF006A"), title = "Figure 1: Feature correlations", lab = TRUE)
# Correlation Matrix - Numeric Variables
corr <- round(cor(housing %>% select(where(is.numeric))), 1)
p.mat <- cor_pmat(housing %>% select(where(is.numeric)))
ggcorrplot(corr, p.mat = p.mat, hc.order = TRUE,
type = "lower", insig = "blank",
ggtheme = ggplot2::theme_gray,
colors = c("#981FAC","#FE9900","#FF006A"), title = "Figure 1: Feature correlations", lab = TRUE)
